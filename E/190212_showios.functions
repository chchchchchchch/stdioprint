   IOLSBASEURL="https://freeze.sh/_/ioio"
  IOSVGBASEURL="https://freeze.sh/_/ioio/_"

# --------------------------------------------------------------------------- #
# DEFINE SVG STUFF FOR REUSE
# --------------------------------------------------------------------------- #
  PROTECTWHITE="XXXX${RANDOM}"
  STYLECNCTFILL='style="fill:#cccccc;stroke:none"'
  STYLECNCTSTROKE='style="fill:none;stroke:#000000;stroke-width:8px"'

  CNCTPATH00=""
  CNCTPATHII="<path d=\"m 200,20.5 0,20\" $STYLECNCTSTROKE />"
  CNCTPATHSW="<path d=\"m 190,20.5 0,20\" $STYLECNCTSTROKE />
              <path d=\"m 210,20.5 0,20\" $STYLECNCTSTROKE />"
  CNCTPATHSB="<path d=\"m 210,42.5 0,-32 -20,0 0,32 z\"
              $STYLECNCTFILL />$CNCTPATHSW"
  CNCTPATHUW="<path d=\"m 67,20.5 0,20\"  $STYLECNCTSTROKE />
              <path d=\"m 333,20.5 0,20\" $STYLECNCTSTROKE />"
  CNCTPATHUB="<path d=\"m 333,42.5 0,-32 -266,0 0,32 z\"
              $STYLECNCTFILL />$CNCTPATHUW"
  CNCTPATHCW="<path d=\"m 67,20.5 0,20\"  $STYLECNCTSTROKE />
              <path d=\"m 93,20.5 0,20\"  $STYLECNCTSTROKE />
              <path d=\"m 307,20.5 0,20\" $STYLECNCTSTROKE />
              <path d=\"m 333,20.5 0,20\" $STYLECNCTSTROKE />"
  CNCTPATHCB="<path d=\"m 67,42.5 0,-32 26,0 0,32 z\"
              $STYLECNCTFILL />
              <path d=\"m 333,42.5 0,-32 -26,0 0,32 z\"
              $STYLECNCTFILL />$CNCTPATHCW"

  FONTSTYLESHARED="font-style:normal;       \
                   font-variant:normal;     \
                   font-weight:500;         \
                   font-stretch:normal;     \
                   text-align:start;        \
                   line-height:140%;        \
                   letter-spacing:0px;      \
                   word-spacing:0px;        \
                   writing-mode:lr-tb;      \
                   text-anchor:start;       \
                   fill:#000000;            \
                   stroke:none;             \
                   font-family:Roboto Mono; \
                  -inkscape-font-specification:Roboto Mono Medium"
# --------------------------------------------------------------------------- #
  if [ `grep showiogrid ${TMPID}.preamble | wc -l` -lt 1 ]
  then
       echo '\newcommand{\showiogrid}[1]{'               >> ${TMPID}.preamble
       echo ' \includepdfmerge[offset=-10 20,'           >> ${TMPID}.preamble
       echo '                  delta=-70 -60,'           >> ${TMPID}.preamble
       echo '                  nup=4x5,'                 >> ${TMPID}.preamble
       echo '                  noautoscale=true,'        >> ${TMPID}.preamble
       echo '                  scale=.25]'               >> ${TMPID}.preamble
       echo ' {#1}'                                      >> ${TMPID}.preamble
       echo '}'                                          >> ${TMPID}.preamble

  else echo "TEX COMMAND ALREADY THERE"
  fi
# --------------------------------------------------------------------------- #
 function getIOSList() {

  (     LSNAME=`echo $* | sed 's/ /\n/g' | #
                rev | cut -d "/" -f 1 | rev | #
                egrep "^[a-z]+$|^s*[0-9a-f]{32}$" | #
                tail -n 1`
     TIMERANGE=`echo $* | sed 's/ /\n/g' | #
                grep "^[0-9]\{10\}" | tail -n 1`
          LSID=`echo $LSNAME$TIMERANGE | #
                md5sum | cut -c 1-6`     #
      LSTARGET="${TMPID}.showiosdump"
   
     if  [ "$LSNAME"    != "" ];then
      if [ "$TIMERANGE" != "" ];then
   
         TIMEEND=`echo $TIMERANGE              | # DISPLAY TIMERANGE
                  sed 's/-/\n/'                | # '-' TO LINEBREAK
                  sort -n                      | # SORT NUMERICAL
                  tail -n 1`                     # SELECT LAST LINE
       TIMESTART=`echo $TIMERANGE              | # DISPLAY TIMERANGE
                  sed 's/-/\n/'                | # '-' TO LINEBREAK
                  sort -n                      | # SORT NUMERICAL
                  sed '1s/^.*$/0101010000\n&/' | # ADD ZERO START TIME
                  grep -v "$TIMEEND"           | # IGNORE $TIMEND
                  tail -n 1                    | # SELECT LAST LINE
                  awk 'BEGIN { FIELDWIDTHS = "2 2 2 2 2" } \
                  { printf "%s/%s/%s %s:%s\n", $2, $3, $1, $4, $5, $6 }'`
      EPOCHSTART=`date -d "$TIMESTART" +"%s"`"000"
         TIMEEND=`echo $TIMEEND | #
                  awk 'BEGIN { FIELDWIDTHS = "2 2 2 2 2" } \
                  { printf "%s/%s/%s %s:%s\n", $2, $3, $1, $4, $5, $6 }'`
        EPOCHEND=`date -d "$TIMEEND" +"%s"`"000"
   
         LSURL="$IOLSBASEURL/x/${LSNAME}.txt"

        #echo "GET IOLIST: $LSURL"
        #echo "START: $TIMESTART ($EPOCHSTART)"
        #echo "  END: $TIMEEND ($EPOCHEND)"
        #echo "LSURL: $LSURL"

         wget --no-check-certificate \
              -O $LSTARGET $LSURL >> $WGETLOG 2>&1

         if [ -f ${TMPID}.io.select ];then rm ${TMPID}.io.select;fi

         for L in `cat $LSTARGET`
          do TIMESTAMP=`echo $L | cut -d ":" -f 2`
             if [ "$TIMESTAMP" -lt "$EPOCHEND" ] &&
                [ "$TIMESTAMP" -gt "$EPOCHSTART" ]
             then echo $L >> ${TMPID}.io.select
             fi
         done

         if [ -f ${TMPID}.io.select ]
         then
              cat ${TMPID}.io.select    | # USELESS USE OF CAT
              grep -n ""                | # NUMBER LINES
              tac                       | # DISPLAY REVERSE
              sort -u -t: -k4,4         | # UNIQ ACCORDING TO NAME
              sort -n                   | # RESORT
              cut -d ":" -f 2-          | # RM LINE NUMBERS
              grep -v "^D:"             | # RM 'D' FLAGGED
              cut -d ":" -f 3           | # NAMES ONLY
              cut -d "." -f 1           | # RM EXTENSION
              tee > ${TMPID}.io.tmp       # WRITE TO TMP FILE

              mv ${TMPID}.io.tmp ${TMPID}.io.select
         fi

      else #echo "NO TIME RANGE PROVIDED"
            LSURL="$IOLSBASEURL/l/${LSNAME}"
            LSTARGET="${TMPID}.io.select"
            wget --no-check-certificate \
                 -O $LSTARGET $LSURL >> $WGETLOG 2>&1
      fi
    #else echo "NO VALID LIST NAME PROVIDED"
    fi

  ) 
 }

# =========================================================================== #
# --------------------------------------------------------------------------- #

function SHOWIOS() {

 ( THISCMD="SHOWIOS";TMPKEEP="$TMPDIR/TMPSHOWIO"
 # ------------------------------------------------------------------------- #
 # MAKE LIST
 # ------------------------------------------------------------------------- #
   LSFILE=`echo $* | sed 's/ /\n/g' | #
           sed 's/F:/\n&/g' | grep "^F:" | #
           egrep "/[a-z]+$|/s*[0-9a-f]{32}$" | #
           tail -n 1 | cut -d ":" -f 2-`
   TIMERANGE=`echo $* | sed 's/ /\n/g' | #
              grep "^[0-9]\{10\}" | tail -n 1`
 # ------------------------------------------------------------------------- #
   if [ "$LSFILE" != "" ];then

         getIOSList $LSFILE $TIMERANGE

         if  [ -f ${TMPID}.io.select ]
         then cat ${TMPID}.io.select      | #
              rev | cut -d "/" -f 1 | rev | #
              sed 's/\....$//'            | #
              tee > ${TMPID}.io.raw
         fi

   else  getVerbatim "$THISCMD" $TMPID.xtract
         cat $TMPID.xtract | # USELESS OF CAT
         sed 's/^%[ ]*//'  | # RM LEADING
         sed '/^[ ]*$/d'   | # RM EMPTY LINES
         tee > ${TMPID}.io.raw
   fi
 # ------------------------------------------------------------------------- #
   if [ -f ${TMPID}.io.names ];then rm ${TMPID}.io.names;fi
 # ------------------------------------------------------------------------- #
  ( IFS=$'\n'
   for I in `cat ${TMPID}.io.raw`
    do
       if [ `echo $I    | #
             grep "^F:" | #
             wc -l` -gt 0 ]
       then  LSFILE=`echo $I | #
                     cut -d ":" -f 2- | #
                     sed 's/ /\n/g' | #
                     egrep "/[a-z]+$|/[0-9a-f]{32}$" | #
                     tail -n 1`
             TIMERANGE=`echo $I             | #
                        cut -d ":" -f 2-    | #
                        sed 's/ /\n/g'      | #
                        grep "^[0-9]\{10\}" | #
                        tail -n 1`            #
             getIOSList $LSFILE $TIMERANGE

             if  [ -f ${TMPID}.io.select ]
             then cat ${TMPID}.io.select      | #
                  rev | cut -d "/" -f 1 | rev | #
                  sed 's/\....$//'            | #
                  tee >> ${TMPID}.io.names
             fi
       elif [ `echo $I | #
               egrep "^[A-F0-9]{14}.*_$" | #
               wc -l` -gt 0 ]
       then    echo "$I" >> ${TMPID}.io.names
       fi
   done; )
 # ------------------------------------------------------------------------- #
   SHOWIOGRID=""; # RESET
   for SHOWIO in `cat $TMPID.io.names`
    do
       SHOWIONAME=`basename $SHOWIO`

        SHORTID=`echo $SHOWIONAME | cut -c 7-13`
       SHORTURL="https://freeze.sh/IO$SHORTID"     
         TXTURL="*/IO$SHORTID";QURL="$SHORTURL"
         IONAME=`echo $SHOWIONAME      | #
                 tr [:lower:] [:upper:]` #

        IOMKID=`echo $SHOWIONAME       | #
                cut -d "_" -f 1-5      | #
                md5sum | cut -c 1-8    | #
                tr [:lower:] [:upper:]`  #
        IOMKURL="${IOSVGBASEURL}/${SHOWIO}.svg"
        IOMKSRC="${TMPID}.${SHOWIO}.svg"


    if [ `ls ${TMPKEEP}${IOMKID}*.pdf 2>/dev/null | wc -l` -lt 4 ]
     then

     echo "GENERATING SHOWIO ($SHOWIONAME)"

     getFile $IOMKURL $IOMKSRC
   # --------------------------------------------------------------------- #
   # MAKE QR CODE
   # --------------------------------------------------------------------- #
     QRID="QR"`echo $SHORTURL | md5sum | cut -c 1-6`
     QRSCALE="scale(0.1,-0.1)";QRMOVE="translate(256.5,480)"
     QRTRANSFORM="transform=\"$QRMOVE$QRSCALE\""
     QRNAME=${TMPID}.${QRID}
     if [ ! -f "${QRNAME}.svg" ];then
          echo "$QURL" | qrencode -iv 1 \
                                  -t EPS \
                                  -o ${TMPID}.${QRID}.eps
          inkscape --export-plain-svg=${QRNAME}.svg \
                   ${TMPID}.${QRID}.eps
     else echo "QRCODE already generated"
     fi
   # --------------------------------------------------------------------- #
     ROTATE="0" # RESET
     IOMKNAME="${TMPID}.${IOMKID}"
     IOMKMAIN="${IOMKNAME}.MAIN.svg"
     IOMKINFO="${IOMKNAME}.INFO.svg"
     IOMKCODE="${IOMKNAME}.CODE.svg"

     echo '<svg width="400" height="400"' | #
     tee                                                     $IOMKMAIN | #
     tee                                                     $IOMKINFO | #
     tee                                                   > $IOMKCODE 

     echo ' xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
            xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape">' | #
     tee -a                                                  $IOMKMAIN | #
     tee -a                                                  $IOMKINFO | #
     tee                                                  >> $IOMKCODE   #       

     echo '<path d="m -200,-200 800,0 0,800 -800,0 z"
            style="fill:none;stroke:none"
            id="buffer" />' | #
     tee -a                                                  $IOMKMAIN | #
     tee -a                                                  $IOMKINFO | #
     tee >>                                                  $IOMKCODE   #

     sed ":a;N;\$!ba;s/\n//g" $IOMKSRC                   | #
     sed 's/<g/\n&/g' | grep  '^<g' | sed 's/<\/svg>//g' | #
     tr -s ' '                                           | #
     sed 's/stroke-width:[0-9\.]*/stroke-width:4/g'      | #
     sed "s/#[Ff]\{6\}\b/$PROTECTWHITE/g"                | #
     sed 's/fill:#[a-fA-F0-9]\{6\}\b/fill:#cccccc/g'     | #
     sed 's/stroke:#[a-fA-F0-9]\{6\}\b/stroke:#bbbbbb/g' | #
     sed "s/$PROTECTWHITE/#ffffff/g"                     | #
     tee                                                  >> $IOMKMAIN   #

     echo '<path d="m 40.5,40.5 319,0 0,319 -319,0 0,-319 z"
            style="fill:none;stroke:#000000;stroke-width:1"
            id="innerframe" />' | #
     tee                                                  >> $IOMKMAIN   #
   # -----
       for CONNECT in `basename $SHOWIO   | #
                       cut -d "_" -f 2-5  | #
                       sed 's/_/ /g'`
        do  TRANSFORM="transform=\"rotate($ROTATE 200 200)\""
            echo "<g $TRANSFORM>"                         >> $IOMKMAIN   #
            CNCTPATHUSE="CNCTPATH$CONNECT"
            echo ${!CNCTPATHUSE}                          >> $IOMKMAIN   #
            echo "</g>"                                   >> $IOMKMAIN   #
            ROTATE=`expr $ROTATE + 90`
       done
   # -----
     echo "<text xml:space=\"preserve\"
            style=\"${FONTSTYLESHARED};font-size:28px;\" 
            x=\"40\" y=\"430\"><tspan sodipodi:role=\"line\"
            x=\"40\" y=\"430\">$TXTURL</tspan></text>" | #
     tee                                                  >> $IOMKINFO   #
     echo "<text xml:space=\"preserve\"
            style=\"${FONTSTYLESHARED};font-size:10px;\" 
            x=\"40\" y=\"450\"><tspan sodipodi:role=\"line\"
            x=\"40\" y=\"450\">$IONAME</tspan></text>" | #
     tee                                                  >> $IOMKINFO   #
 
     echo "<g $QRTRANSFORM>"                              >> $IOMKCODE   #
     sed ':a;N;$!ba;s/\n/ /g' ${QRNAME}.svg | #
     tr -s ' ' | sed 's/</\n&/g' | #
     grep "^<path"                                        >> $IOMKCODE   #
     echo "</g>"                                          >> $IOMKCODE   #
 
     echo '</svg>' | #
     tee -a                                                  $IOMKMAIN | #
     tee -a                                                  $IOMKINFO | #
     tee                                                  >> $IOMKCODE   #
 
   # --------------------------------------------------------------------- # 
     for LAYER in MAIN INFO CODE
      do inkscape --export-area-drawing \
                  --export-pdf=${IOMKNAME}.${LAYER}.pdf \
                  ${IOMKNAME}.${LAYER}.svg ;done
   # --------------------------------------------------------------------- # 

     pdftk       ${IOMKNAME}.INFO.pdf       \
      background ${IOMKNAME}.MAIN.pdf       \
       output    ${TMPKEEP}${IOMKID}MI0.pdf

     pdftk       ${IOMKNAME}.CODE.pdf       \
      background ${IOMKNAME}.MAIN.pdf       \
       output    ${TMPKEEP}${IOMKID}M0Q.pdf

     pdftk       ${IOMKNAME}.CODE.pdf       \
      background ${TMPKEEP}${IOMKID}MI0.pdf \
       output    ${TMPKEEP}${IOMKID}MIQ.pdf

     cp ${IOMKNAME}.MAIN.pdf ${TMPKEEP}${IOMKID}M00.pdf
   # --------------------------------------------------------------------- # 

    else echo "SHOWIO IS DONE ($SHOWIONAME)"
    fi

    SHOWIOGRID="${SHOWIOGRID},${TMPKEEP}${IOMKID}MIQ.pdf,{1}"

   done

   SHOWIOGRID=`echo $SHOWIOGRID | #
               sed 's/^,/\\\\showiogrid{/' | #
               sed 's/$/}/'`
   echo -e "\n$SHOWIOGRID\n" >> $SRCDUMP

 )
 # ------------------------------------------------------------------------- #

}

# --------------------------------------------------------------------------- #
